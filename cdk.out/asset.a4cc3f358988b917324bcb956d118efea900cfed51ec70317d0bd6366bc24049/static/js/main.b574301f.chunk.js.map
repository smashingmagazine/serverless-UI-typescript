{"version":3,"sources":["Components/Note.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Note","content","delContent","className","note","onClick","App","useState","noteContent","setNoteContent","noteList","setNoteList","noteToDelete","filter","type","placeholder","name","value","onChange","event","target","newContent","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAmBeA,EAjBF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,WACvB,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,UAAf,SACE,+BAAOF,EAAQG,SAEjB,wBACEC,QAAS,WACPH,EAAWD,EAAQG,OAFvB,mBC4CSE,EA/CC,WAAO,IAAD,EACkBC,mBAAiB,IADnC,mBACbC,EADa,KACAC,EADA,OAEYF,mBAAkB,IAF9B,mBAEbG,EAFa,KAEHC,EAFG,KAgBdT,EAAa,SAACU,GAClBD,EACED,EAASG,QAAO,SAACZ,GACf,OAAOA,EAAQG,OAASQ,OAK9B,OACE,sBAAKT,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,uBACEW,KAAK,OACLC,YAAY,cACZC,KAAK,OACLC,MAAOT,EACPU,SA7BW,SAACC,GACM,SAAtBA,EAAMC,OAAOJ,MACfP,EAAeU,EAAMC,OAAOH,YA8B1B,wBAAQZ,QA1BE,WACd,IAAMgB,EAAa,CAAEjB,KAAMI,GAC3BG,EAAY,GAAD,mBAAKD,GAAL,CAAeW,KAC1BZ,EAAe,KAuBX,yBAEF,qBAAKN,UAAU,WAAf,SACGO,EAASY,KAAI,SAACrB,EAAgBsB,GAC7B,OAAO,cAAC,EAAD,CAAgBtB,QAASA,EAASC,WAAYA,GAAnCqB,YC/BbC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b574301f.chunk.js","sourcesContent":["import { Props } from \"../Interfaces\";\n\nconst Note = ({ content, delContent }: Props) => {\n  return (\n    <div className=\"note\">\n      <div className=\"content\">\n        <span>{content.note}</span>\n      </div>\n      <button\n        onClick={() => {\n          delContent(content.note);\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n\nexport default Note;\n","import { FC, ChangeEvent, useState } from \"react\";\nimport \"./App.css\";\nimport Note from \"./Components/Note\";\nimport { INote } from \"./Interfaces\";\n\nconst App: FC = () => {\n  const [noteContent, setNoteContent] = useState<string>(\"\");\n  const [noteList, setNoteList] = useState<INote[]>([]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    if (event.target.name === \"note\") {\n      setNoteContent(event.target.value);\n    }\n  };\n\n  const addNote = (): void => {\n    const newContent = { note: noteContent };\n    setNoteList([...noteList, newContent]);\n    setNoteContent(\"\");\n  };\n\n  const delContent = (noteToDelete: string): void => {\n    setNoteList(\n      noteList.filter((content) => {\n        return content.note !== noteToDelete;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div className=\"inputContainer\">\n          <input\n            type=\"text\"\n            placeholder=\"Add Note...\"\n            name=\"note\"\n            value={noteContent}\n            onChange={handleChange}\n          />\n        </div>\n        <button onClick={addNote}>Add Note</button>\n      </div>\n      <div className=\"noteList\">\n        {noteList.map((content: INote, key: number) => {\n          return <Note key={key} content={content} delContent={delContent} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}